# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:

trigger:
- main

pool:
  vmImage: ubuntu-latest



stages:
  - stage: compliance
    jobs:
        - job: compliance
          displayName: 'Run terrascan for compliance'
          pool:
            vmImage: 'ubuntu-latest'

          steps:
            - script: |
                curl --location https://github.com/accurics/terrascan/releases/download/v1.3.1/terrascan_1.3.1_Linux_x86_64.tar.gz --output terrascan.tar.gz
                tar -xvf terrascan.tar.gz
                sudo install terrascan /usr/local/bin
              displayName: 'Install terrascan in pipeline'
            - script: |
                terrascan scan -t azure -i terraform
              workingDirectory: $(System.DefaultWorkingDirectory)
              displayName: 'Run scan'
  - stage: development
    dependsOn: compliance
    jobs:
      - deployment: Deploy
        variables:
        - group: Terraform-dev
       
        environment: Dev
        
          
        strategy:
            runOnce:
                deploy:
                   steps:
                    - checkout: self
                    
                    - task: FileTransform@1
                      inputs:
                          folderPath: '$(System.DefaultWorkingDirectory)'
                          fileType: 'json'
                          targetFiles: 'parameter.json'
                    - task: TerraformInstaller@0
                      inputs:
                              terraformVersion: 'latest'
                    - task: TerraformTaskV3@3
                      inputs:
                              provider: 'azurerm'
                              command: 'init'
                              backendServiceArm: 'az-asgmts'
                              backendAzureRmResourceGroupName: 'Devops-RG'
                              backendAzureRmStorageAccountName: 'devopstrainingstorage'
                              backendAzureRmContainerName: 'swathi-tfstate-asgmt'
                              backendAzureRmKey: 'terraform.tfstate'
                    - task: TerraformTaskV3@3
                      inputs:
                           provider: 'azurerm'
                           command: 'plan'
                           commandOptions: '--var-file="$(System.DefaultWorkingDirectory)/parameter.json"'
                           environmentServiceNameAzureRM: 'az-asgmts'
                    - task: TerraformTaskV3@3
                      inputs:
                             provider: 'azurerm'
                             command: 'apply'
                             commandOptions: '--var-file="$(System.DefaultWorkingDirectory)/parameter.json"'
                             environmentServiceNameAzureRM: 'az-asgmts'
                    - task: TerraformTaskV3@3
                      inputs:
                        provider: 'azurerm'
                        command: 'destroy'
                        commandOptions: '--var-file="$(System.DefaultWorkingDirectory)/parameter.json"'
                        environmentServiceNameAzureRM: 'az-asgmts'

  - stage: test
    jobs:
      - deployment: Deploy
        variables:
        - group: Terraform-test1
       
        environment: Dev
        
          
        strategy:
            runOnce:
                deploy:
                   steps:
                    - checkout: self
                    
                    - task: FileTransform@1
                      inputs:
                          folderPath: '$(System.DefaultWorkingDirectory)'
                          fileType: 'json'
                          targetFiles: 'parameter.json'
                    - task: TerraformInstaller@0
                      inputs:
                              terraformVersion: 'latest'
                    - task: TerraformTaskV3@3
                      inputs:
                        provider: 'azurerm'
                        command: 'init'
                        backendServiceArm: 'az-asgmts'
                        backendAzureRmResourceGroupName: 'Devops-RG'
                        backendAzureRmStorageAccountName: 'devopstrainingstorage'
                        backendAzureRmContainerName: 'swathi-tfstate-asgmt'
                        backendAzureRmKey: 'terraform1.tfstate'
                    - task: TerraformTaskV3@3
                      inputs:
                           provider: 'azurerm'
                           command: 'plan'
                           commandOptions: '--var-file="$(System.DefaultWorkingDirectory)/parameter.json"'
                           environmentServiceNameAzureRM: 'az-asgmts'
                    - task: TerraformTaskV3@3
                      inputs:
                             provider: 'azurerm'
                             command: 'apply'
                             commandOptions: '--var-file="$(System.DefaultWorkingDirectory)/parameter.json"'
                             environmentServiceNameAzureRM: 'az-asgmts'
                    - task: TerraformTaskV3@3
                      inputs:
                        provider: 'azurerm'
                        command: 'destroy'
                        commandOptions: '--var-file="$(System.DefaultWorkingDirectory)/parameter.json"'
                        environmentServiceNameAzureRM: 'az-asgmts'


